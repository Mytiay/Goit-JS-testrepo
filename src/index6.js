// Деструктуризация объектов
// Сложные данные всегда представлены объектом. Множественные обращения к свойствам объекта визуально загрязняют код.

const book = {
  title: "The Last Kingdom",
  author: "Bernard Cornwell",
  genres: ["historical prose", "adventure"],
  isPublic: true,
  rating: 8.38,
};

const accessType = book.isPublic ? "публичном" : "закрытом";
const message = `Книга ${book.title} автора ${book.author} с рейтингом ${book.rating} находится в ${accessType} доступе.`;


// Деструктуризация позволяет «распаковать» значения свойств объекта в локальные переменные. Это делает код в месте их использования менее «шумным».

const book1 = {
  title: "The Last Kingdom",
  author: "Bernard Cornwell",
  genres: ["historical prose", "adventure"],
  isPublic: true,
  rating: 8.38,
};

// Деструктуризируем
const { title, author, isPublic, rating, coverImage } = book;
console.log(coverImage); // undefined

const accessType1 = isPublic ? "публичном" : "закрытом";
const message1 = `Книга ${title} автора ${author} с рейтингом ${rating} находится в ${accessType} доступе.`;

// Деструктуризация массивов
// Деструктуризирующее присваивание можно использовать и для массивов, но с некоторыми особенностями.

// Вместо фигурных скобок {} используются квадратные [].
// Переменным, указанным в квадратных скобках [], будут последовательно присваиваться значения элементов массива.
// Например, есть массив цветов из которого нужно в отдельные переменные получить значения каждой составляющей цвета.

const rgb1 = [200, 255, 100];
const [red, green, blue1] = rgb;

console.log(`R:${red},G:${green},B:${blue}`); // "R:200,G:255,B:100"

// После ключевого слова const или let ставим открывающую и закрывающую квадратные скобки, как при объявлении массива. Внутри скобок, через запятую, указываем имена переменных, в которые будут помещены значения массива.

// В результате такой записи будут созданы 3 переменные и в них будут помещены элементы в нумерованном порядке - от 0 и до конца массива.

// При деструктуризации массивов, значение переменной может быть присвоено после ее объявления. На практике это используется редко.

const rgb2 = [200, 255, 100];
let red2, green2, blue2;

[red, green, blue] = rgb;

console.log(`R:${red},G:${green},B:${blue}`); // "R:200,G:255,B:100"

// Если переменных больше чем элементов массива, им будет присвоено undefined, поэтому можно указывать значения по умолчанию.

const rgb3 = [200, 100, 255];

const [red3, green3, blue3, alfa = 0.3] = rgb;

console.log(`R:${red},G:${green},B:${blue},Alfa:${alfa}`); // "R:200,G:100,B:255,Alfa:0.3"

// Иногда из массива необходимо деструктуризировать только первые N элементов, а остальные сохранить в одну переменную в виде массива. При деструкции массива можно распаковать и присвоить оставшуюся часть элементов массива переменной, используя операцию ... (rest).

const rgb4 = [200, 255, 100];

const [red4, ...colors] = rgb;

console.log(red); // "200"
console.log(colors); // [255, 100]

// Элементы можно пропускать. Допустим, из массива rgb необходимо взять только последнее значение. На практике эта возможность используется редко.

const rgb = [200, 100, 255];

const [, , blue] = rgb;

console.log(`Blue: ${blue}`); // "Blue: 255"